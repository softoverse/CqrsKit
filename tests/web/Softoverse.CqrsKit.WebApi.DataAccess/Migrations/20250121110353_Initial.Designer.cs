// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Softoverse.CqrsKit.WebApi.DataAccess;

#nullable disable

namespace Softoverse.CqrsKit.WebApi.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250121110353_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eaca3107-de08-4d1f-93ff-ca3d87ea137e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5036f71-0239-4b67-b775-5adbe5fcbc98",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEL++WXwo+LwK5uZdFmR5By0Y3eenLFum2Wc5wMIRlyJMJYsfyhkXaIvfRdTkaizy9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7bc295d-abac-4c3b-9d33-833258c2716d",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "94df2b00-1fed-4067-a2c4-dfac4c192135",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cc18343-0e52-4443-a563-a7a4def78282",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAmMzPLYXKCkk2TPO9QqywIKAApEBxQ4sBJdqLLNeePZ0o3Ix30ObawpxOGW3/OrcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af5f60a2-9171-48bc-8ca3-5c4e64f5a354",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f5bb9bf9-10a8-4e32-8054-3dd9a9d320d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cc18343-0e52-4443-a563-a7a4def78282",
                            Email = "admin2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@GMAIL.COM",
                            NormalizedUserName = "ADMIN2",
                            PasswordHash = "AQAAAAIAAYagAAAAEOFgFuyU/Tg0MYk+JuXydSf/FLhIxAGHN1+crUOGE6yUBK6Q81IDmSg5sg3G5gwglQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af5f60a2-9171-48bc-8ca3-5c4e64f5a354",
                            TwoFactorEnabled = false,
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = "8c8ba378-85d1-4e11-8a6a-ea922c7bd44b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba9a687d-f69c-47a5-8ba5-6ca5e92129ef",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEP1mOA2ZPOYDCwE8/NchGK5wDsE76sPexTcKYryAw7nHeT1PUWlK8P7HQwMxR6Xlkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9561b38e-379d-4dd3-99da-705cb970acc5",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.ApprovalFlowPendingTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovalFlowCorrectionPageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovalFlowDetailsPageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovalFlowHandlerFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovalFlowHandlerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovalFlowHandlerNamespace")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandFullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("CommandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandNamespace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletedStepNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandlerFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandlerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandlerNamespace")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrectionAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("BLOB");

                    b.Property<string>("ResponseFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseNamespace")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ReviewedBy")
                        .HasColumnType("BLOB");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniqueIdentification")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApprovalFlowPendingTasks");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.CommandQuery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApprovalFlowRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCommand")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseNamespace")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Namespace", "FullName", "ResponseName", "ResponseNamespace", "ResponseFullName")
                        .IsUnique();

                    b.ToTable("CommandQueries");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.Custom.ApprovalFlowConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ApprovalFlowConfigurations");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.Custom.ApprovalFlowConfigurationStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ApprovalFlowConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrectionAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSelectReviewer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalFlowConfigurationId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("ApprovalFlowConfigurationSteps");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.MappingModels.CommandApprovalFlowConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ApprovalFlowConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ApprovalFlowConfigurationId1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CommandId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalFlowConfigurationId");

                    b.HasIndex("ApprovalFlowConfigurationId1");

                    b.HasIndex("CommandId")
                        .IsUnique();

                    b.ToTable("CommandApprovalFlowConfigurations");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.MappingModels.CommandQueryUserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CommandQueryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommandQueryId");

                    b.HasIndex("UserGroupId", "CommandQueryId")
                        .IsUnique();

                    b.ToTable("CommandQueryUserGroups");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgeCategory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.User.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.User.UserGroupUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UserGroupId = 1L,
                            UserId = "eaca3107-de08-4d1f-93ff-ca3d87ea137e"
                        },
                        new
                        {
                            Id = 2L,
                            UserGroupId = 2L,
                            UserId = "94df2b00-1fed-4067-a2c4-dfac4c192135"
                        },
                        new
                        {
                            Id = 3L,
                            UserGroupId = 2L,
                            UserId = "f5bb9bf9-10a8-4e32-8054-3dd9a9d320d7"
                        },
                        new
                        {
                            Id = 4L,
                            UserGroupId = 3L,
                            UserId = "8c8ba378-85d1-4e11-8a6a-ea922c7bd44b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.Custom.ApprovalFlowConfigurationStep", b =>
                {
                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.CQRS.Custom.ApprovalFlowConfiguration", "ApprovalFlowConfiguration")
                        .WithMany("ApprovalFlowConfigurationSteps")
                        .HasForeignKey("ApprovalFlowConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.User.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalFlowConfiguration");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.MappingModels.CommandApprovalFlowConfiguration", b =>
                {
                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.CQRS.MappingModels.CommandApprovalFlowConfiguration", "ApprovalFlowConfiguration")
                        .WithMany("CommandApprovalFlowConfigurations")
                        .HasForeignKey("ApprovalFlowConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.CQRS.Custom.ApprovalFlowConfiguration", null)
                        .WithMany("CommandApprovalFlowConfigurations")
                        .HasForeignKey("ApprovalFlowConfigurationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.CQRS.CommandQuery", "Command")
                        .WithOne("CommandApprovalFlowConfiguration")
                        .HasForeignKey("Softoverse.CqrsKit.WebApi.Models.CQRS.MappingModels.CommandApprovalFlowConfiguration", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalFlowConfiguration");

                    b.Navigation("Command");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.MappingModels.CommandQueryUserGroup", b =>
                {
                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.CQRS.CommandQuery", "CommandQuery")
                        .WithMany("CommandQueryUserGroups")
                        .HasForeignKey("CommandQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.User.UserGroup", "UserGroup")
                        .WithMany("CommandQueryUserGroups")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommandQuery");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.User.UserGroupUser", b =>
                {
                    b.HasOne("Softoverse.CqrsKit.WebApi.Models.User.UserGroup", "UserGroup")
                        .WithMany("UserGroupUsers")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.CommandQuery", b =>
                {
                    b.Navigation("CommandApprovalFlowConfiguration");

                    b.Navigation("CommandQueryUserGroups");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.Custom.ApprovalFlowConfiguration", b =>
                {
                    b.Navigation("ApprovalFlowConfigurationSteps");

                    b.Navigation("CommandApprovalFlowConfigurations");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.CQRS.MappingModels.CommandApprovalFlowConfiguration", b =>
                {
                    b.Navigation("CommandApprovalFlowConfigurations");
                });

            modelBuilder.Entity("Softoverse.CqrsKit.WebApi.Models.User.UserGroup", b =>
                {
                    b.Navigation("CommandQueryUserGroups");

                    b.Navigation("UserGroupUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
